--- libcfu-0.03/examples/large_hash.c.orig	2005-07-31 02:50:41.000000000 +0200
+++ libcfu-0.03/examples/large_hash.c	2024-02-11 13:11:25.380443396 +0100
@@ -74,16 +74,26 @@ hash_func_tc(const void *key, size_t len
     c += length;
     switch(len){              /* all the case statements fall through */
     case 11: c+=((ub4)k[10]<<24);
+	/* fallthrough */
     case 10: c+=((ub4)k[9]<<16);
+	/* fallthrough */
     case 9 : c+=((ub4)k[8]<<8);
+	/* fallthrough */
 	/* the first byte of c is reserved for the length */
     case 8 : b+=((ub4)k[7]<<24);
+	/* fallthrough */
     case 7 : b+=((ub4)k[6]<<16);
+	/* fallthrough */
     case 6 : b+=((ub4)k[5]<<8);
+	/* fallthrough */
     case 5 : b+=k[4];
+	/* fallthrough */
     case 4 : a+=((ub4)k[3]<<24);
+	/* fallthrough */
     case 3 : a+=((ub4)k[2]<<16);
+	/* fallthrough */
     case 2 : a+=((ub4)k[1]<<8);
+	/* fallthrough */
     case 1 : a+=k[0];
 	/* case 0: nothing left to add */
     }
@@ -98,7 +108,6 @@ hash_func_tc(const void *key, size_t len
 static int
 time_it(cfuhash_function_t hf, double *elapsed_time, u_int32_t num_tests) {
 	cfuhash_table_t *hash = cfuhash_new_with_initial_size(30);
-	u_int32_t flags = 0;
 	char key[32];
 	char value[32];
 	size_t i;
@@ -108,7 +117,7 @@ time_it(cfuhash_function_t hf, double *e
 	cfutime_t *time = cfutime_new();
 
 	/* freeze the hash so that it won't shrink while we put in all the data */
-	flags = cfuhash_set_flag(hash, CFUHASH_FROZEN_UNTIL_GROWS);
+	cfuhash_set_flag(hash, CFUHASH_FROZEN_UNTIL_GROWS);
 	cfuhash_set_hash_function(hash, hf);
 
 	cfutime_begin(time);
